// Do not edit! Generated by gokit-generate

package z

import (
	"github.com/go-kit/kit/endpoint"
	"golang.org/x/net/context"
)

func MakeXEndpoints(x X) map[string]endpoint.Endpoint {
	m := map[string]endpoint.Endpoint{}

	m["Y"] = func(ctx context.Context, request interface{}) (interface{}, error) {
		select {
		default:
		case <-ctx.Done():
			return nil, endpoint.ErrContextCanceled
		}
		req, ok := request.(XYRequest)
		if !ok {
			return nil, endpoint.ErrBadCast
		}
		var err error
		var resp XYResponse
		resp.Int64 = x.Y(ctx, req.P, req.Int, req.Int1, req.Int64)
		return resp, err
	}

	m["Z"] = func(ctx context.Context, request interface{}) (interface{}, error) {
		select {
		default:
		case <-ctx.Done():
			return nil, endpoint.ErrContextCanceled
		}
		req, ok := request.(XZRequest)
		if !ok {
			return nil, endpoint.ErrBadCast
		}
		var err error
		var resp XZResponse
		resp.R, err = x.Z(ctx, req.A, req.B)
		return resp, err
	}

	return m
}
