// Do not edit! Generated by gokit-generate

package z

import (
<<<<<<< HEAD
	"github.com/go-kit/kit/endpoint"
	"golang.org/x/net/context"
)


type AdderEndpoints struct {
	x Adder
}

func MakeAdderEndpoints (x Adder) AdderEndpoints {
	return AdderEndpoints{x}
}

type AdderClient struct {
	f func(string) endpoint.Endpoint
}

func MakeAdderClient (f func(string) endpoint.Endpoint) AdderClient {
	return AdderClient{f}
}


func (a AdderEndpoints) Add (ctx context.Context, request interface{}) (interface{}, error) {
	select {
	default:
	case <-ctx.Done():
		return nil, endpoint.ErrContextCanceled
	}
	req, ok := request.(AdderAddRequest)
	if !ok {
		return nil, endpoint.ErrBadCast
	}
	var err error
	var resp AdderAddResponse
	resp.Int = a.x.Add(req.A, req.B)
	return resp, err
}

func (a AdderClient) Add (a1 int, b int) (int1 int) {
	ctx := context.TODO()
	var err error
	var req AdderAddRequest
	req.A, req.B = a1, b
	var raw interface{}
	raw, err = a.f("Add")(ctx , req)
	if err != nil {
		panic(err)
	}
	resp, ok := raw.(AdderAddResponse)
	if !ok {
		err  = endpoint.ErrBadCast
		panic(err)
	}

	int1 = resp.Int
	return
}


=======
	"golang.org/x/net/context"
	"github.com/go-kit/kit/endpoint"
)

func MakeAdderEndpoints(x Adder) map[string]endpoint.Endpoint{
	m :=  map[string]endpoint.Endpoint{}

	m["Add"] = func (ctx context.Context, request interface{}) (interface{}, error) {
		select {
		default:
		case <-ctx.Done():
			return nil, endpoint.ErrContextCanceled
		}
		req, ok := request.(AdderAddRequest)
		if !ok {
			return nil, endpoint.ErrBadCast
		}
		var err error
		var resp AdderAddResponse
		resp.Int = x.Add(req.A, req.B)
		return resp, err
	}
	return m

}
>>>>>>> endpoints
