// Do not edit! Generated by gokit-generate

package add

import (
	"github.com/go-kit/kit/endpoint"
	"golang.org/x/net/context"
)


type AdderEndpoints struct {
	x Adder
}

func MakeAdderEndpoints (x Adder) AdderEndpoints {
	return AdderEndpoints{x}
}

type AdderClient struct {
	f func(string) endpoint.Endpoint
}

func MakeAdderClient (f func(string) endpoint.Endpoint) AdderClient {
	return AdderClient{f}
}


func (a AdderEndpoints) Add (ctx context.Context, request interface{}) (interface{}, error) {
	select {
	default:
	case <-ctx.Done():
		return nil, endpoint.ErrContextCanceled
	}
	req, ok := request.(AdderAddRequest)
	if !ok {
		return nil, endpoint.ErrBadCast
	}
	var err error
	var resp AdderAddResponse
	resp.V = a.x.Add(ctx, req.A, req.B)
	return resp, err
}

func (a AdderClient) Add (ctx context.Context, a1 int64, b int64) (v int64) {
	
	var err error
	var req AdderAddRequest
	ctx, req.A, req.B = ctx, a1, b
	var raw interface{}
	raw, err = a.f("Add")(ctx , req)
	if err != nil {
		panic(err)
	}
	resp, ok := raw.(AdderAddResponse)
	if !ok {
		err  = endpoint.ErrBadCast
		panic(err)
	}

	v = resp.V
	return
}


